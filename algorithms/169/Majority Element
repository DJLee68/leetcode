/*
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2
*/

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int res;
        unordered_set<int> set(nums.begin(), nums.end());
        int half;
        nums.size() % 2 ? half = (nums.size() / 2)+1 : half = nums.size() / 2;
        for(auto k : set){
            if(count(nums.begin(), nums.end(), k) >= half) res=k;
        }
        return res;
    }
};
