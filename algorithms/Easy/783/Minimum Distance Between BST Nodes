/*
Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.

Example :

Input: root = [4,2,6,1,3,null,null]
Output: 1
Explanation:
Note that root is a TreeNode object, not an array.

The given tree [4,2,6,1,3,null,null] is represented by the following diagram:

          4
        /   \
      2      6
     / \    
    1   3  

while the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.
Note:

The size of the BST will be between 2 and 100.
The BST is always valid, each node's value is an integer, and each node's value is different.
This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/
Accepted
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int myFunc(int x, int y){
        return x-y;
    }
    int minDiffInBST(TreeNode* root) {
        vector<int> vec = preorder(root);
        vector<int> tmp;
        for(int i = 0; i<vec.size()-1; i++){
            tmp.push_back(vec[i] - vec[i+1]);
        }
        int res = *min_element(tmp.begin(), tmp.end());
        return res;
    }
    
    vector<int> preorder(TreeNode* root){
        if(!root) return {};
        vector<int> vec;
        vector<int> r = preorder(root->right);
        vec.insert(vec.end(), r.begin(), r.end());
        vec.push_back(root->val);
        vector<int> l = preorder(root->left);
        vec.insert(vec.end(), l.begin(), l.end());
        
        return vec;
    }
};
