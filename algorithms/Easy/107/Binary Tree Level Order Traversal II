/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> res;
        queue<TreeNode*> q;
        if(!root) return {};
        q.push(root);
        while(!q.empty()){
            int size = q.size();
            vector<int> temp_vec;
            for(int i = 0; i<size; i++){
                TreeNode* tree = q.front();
                q.pop();
                temp_vec.push_back(tree->val);
                if(tree->left) q.push(tree->left);
                if(tree->right) q.push(tree->right);
            }
            res.push_back(temp_vec);
        }
        reverse(res.begin(), res.end());
        return res;
    }
};
