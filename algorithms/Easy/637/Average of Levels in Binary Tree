/*
Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.
Example 1:
Input:
    3
   / \
  9  20
    /  \
   15   7
Output: [3, 14.5, 11]
Explanation:
The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].
Note:
The range of node's value is in the range of 32-bit signed integer.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {   
        vector<double> res;
        stack<TreeNode*> st1;
        stack<TreeNode*> st2;
        st1.push(root);
        while(!st1.empty() || !st2.empty()){
            if(st1.empty()){
                move_st(st1, st2, res);
            }
            else{
                move_st(st2, st1, res);
            }
        }
        return res;
    }
    void move_st(stack<TreeNode*> &st1, stack<TreeNode*> &st2, vector<double> &res){
        double dv;
        long sum = 0;
        double size = 0;
        TreeNode* top_tree;
        size = st2.size();
        while(!st2.empty()){
            top_tree = st2.top();
            st2.pop();
            sum += top_tree->val;
            if(top_tree->left) st1.push(top_tree->left);
            if(top_tree->right) st1.push(top_tree->right);
        }
            dv = sum/size;
            res.push_back(dv);   
    }
};
