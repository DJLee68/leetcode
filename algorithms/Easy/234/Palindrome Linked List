/*
Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true
Follow up:
Could you do it in O(n) time and O(1) space?
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        int size = 0;
        int half = 0;
        vector<int> val;
        ListNode* temp = head;
        ListNode* second_last;
        while(temp){
            size++;
            val.push_back(temp->val);
            if(!temp->next) break;
            temp = temp->next;
        }
        half = size / 2;
        for(int i = 0; i<half; i++){
            if(val[i] != val[val.size()-1-i]) return false;
        }
        return true;
    }
};
