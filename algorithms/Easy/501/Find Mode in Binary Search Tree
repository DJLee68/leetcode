/*
Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
 

For example:
Given BST [1,null,2,2],

   1
    \
     2
    /
   2
 

return [2].

Note: If a tree has more than one mode, you can return them in any order.

Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int, int> umap;
    vector<int> findMode(TreeNode* root) {
        if(!root) return {};
        inorder(root);
        int max_val = 0;
        vector<int> res;
        for(auto pair : umap){
            if(pair.second > max_val){
                max_val = pair.second;
                res.clear();
                res.push_back(pair.first);
            }
            else if(pair.second == max_val){
                res.push_back(pair.first);
            }
        }
        return res;
    }
    void inorder(TreeNode* root){
        if(!root) return;
        inorder(root->left);
        umap[root->val]+=1;
        inorder(root->right);
    }
};
