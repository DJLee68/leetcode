/*
Given a string S that only contains "I" (increase) or "D" (decrease), let N = S.length.

Return any permutation A of [0, 1, ..., N] such that for all i = 0, ..., N-1:

If S[i] == "I", then A[i] < A[i+1]
If S[i] == "D", then A[i] > A[i+1]
*/

class Solution {
public:
    vector<int> diStringMatch(string S) {
        vector<int> res;
        int inc = 0;
        int dec = S.length();
        for(int i = 0; i<S.length(); i++){
            if(S[i] == 'I'){
                res.push_back(inc);
                inc++;
            }
            else if(S[i] == 'D'){
                res.push_back(dec);
                dec--;
            }
        }
        if(S.back() == 'I') res.push_back(res.back() + 1);
        else res.push_back(res.back() - 1);
        return res;
    }
};
