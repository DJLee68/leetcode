/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        vector<int> vec = tree_to_vec(root);
        unordered_set<int> iset;
        for(int i=0; i<vec.size(); i++){
            if(iset.find(k - vec[i]) != iset.end()){
                return true;
            }
            iset.insert(vec[i]);
        }
        return false;
    }
    
    vector<int> tree_to_vec(TreeNode* root){
        if(!root) return {};
        vector<int> vec;
        vec.push_back(root->val);
        if(root->left){
            vector<int> left = tree_to_vec(root->left);
            vec.insert(vec.end(), left.begin(), left.end());
        }
        if(root->right){
            vector<int> right = tree_to_vec(root->right);
            vec.insert(vec.end(), right.begin(), right.end());
        }
        return vec;
    }
};
