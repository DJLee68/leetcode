/*
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3
 

Follow up: Solve it both recursively and iteratively.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(!root) return true;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int size = q.size();
            vector<int> tmp;
            for(int i=0; i<size; i++){
                TreeNode* t = q.front();
                q.pop();
                if(!t->left) tmp.push_back(-1);
                else{
                    tmp.push_back(t->left->val);
                    q.push(t->left);
                }
                if(!t->right) tmp.push_back(-1);
                else{
                    tmp.push_back(t->right->val);
                    q.push(t->right);
                }
            }
            if(!checkSymmetric(tmp)) return false;
        }
        return true;
    }
    bool checkSymmetric(vector<int> vec){
        int size = vec.size();
        for(int i=0, j=size-1; i<j; i++, j--){
            if(vec[i] != vec[j]) return false;
        }
        return true;
    }
};
