/*
Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if(!root) return 0;
        int l = diameterOfBinaryTree(root->left);
        int r = diameterOfBinaryTree(root->right);
        int depth = 0;
        if(root->left){
            int l_depth = findDepth(root->left, 0);    
            depth += l_depth;
            depth += 1;
        }
        if(root->right){
            int r_depth = findDepth(root->right, 0);    
            depth += r_depth;
            depth += 1;
        }
        cout << "l: " << l;
        cout << "r: " << r; 
        cout << "depth: " << depth;
        cout << endl;
        int temp = max(l, r);
        int res = max(temp, depth);
        return res;
    }
    int findDepth(TreeNode* root, int depth){
        if(!root) return depth;
        if(root->left || root->right){
            depth += 1;
        }
        int big = max(findDepth(root->left, depth), findDepth(root->right, depth));
        return big;
    }
};
