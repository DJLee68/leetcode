/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
        if(!root) return 100000;
        int l_big = getMost(root->left, "left");
        int r_small = getMost(root->right, "right");
        int diff = abs(root->val - l_big) < abs(root->val - r_small) ? abs(root->val - l_big) : abs(root->val - r_small);
        int l = getMinimumDifference(root->left);
        int r = getMinimumDifference(root->right);  
        vector<int> temp = {diff, l, r};
        int res = *min_element(temp.begin(), temp.end());
     
        return res;
    }
    int getMost(TreeNode* root, string type){
        if(!root) return 100000;
        if(type == "left"){
            if(root->right) return getMost(root->right, "left");
            else return root->val;
        }
        else{
            if(root->left) return getMost(root->left, "right");
            else return root->val;
        }
    }
    
    
};
