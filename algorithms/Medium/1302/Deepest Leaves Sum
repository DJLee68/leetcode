/*
Given a binary tree, return the sum of values of its deepest leaves.
 

Example 1:



Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15
 

Constraints:

The number of nodes in the tree is between 1 and 10^4.
The value of nodes is between 1 and 100.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<pair<int, int>> vec;
    int deepestLeavesSum(TreeNode* root) {
        int res = 0;
        int depth = findDepth(root, 0, vec);
        for(auto n : vec){
            if(n.first == depth) res+=n.second;
        }
        return res;
    }
    int findDepth(TreeNode* root, int depth, vector<pair<int, int>> &vec){
        if(!root) return depth;
        depth+=1;
        if(!root->left && !root->right) vec.push_back(make_pair(depth, root->val));
        int l = findDepth(root->left, depth, vec);
        int r = findDepth(root->right, depth, vec);
        depth = max(l, r);
        return depth;
    }
};
