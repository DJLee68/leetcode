/*
Given a binary tree, return the sum of values of nodes with even-valued grandparent.  (A grandparent of a node is the parent of its parent, if it exists.)

If there are no nodes with an even-valued grandparent, return 0.

 

Example 1:



Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 18
Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.
 

Constraints:

The number of nodes in the tree is between 1 and 10^4.
The value of nodes is between 1 and 100.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    int sumEvenGrandparent(TreeNode* root) {
        int sum = 0;
        if(!root) return 0;
        if(root->val % 2 == 0){
            sumTree(root, sum, 0);
        }   
        sum += sumEvenGrandparent(root->left);
        sum += sumEvenGrandparent(root->right);
        return sum;
    }
    void sumTree(TreeNode* root, int &sum, int depth){
        if(!root) return;
        if(depth == 2){
            sum+=root->val;
            return;
        }
        sumTree(root->left, sum, depth+1);
        sumTree(root->right, sum, depth+1);
    }
};
