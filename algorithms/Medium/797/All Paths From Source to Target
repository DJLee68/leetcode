/*
Given a directed acyclic graph of N nodes. Find all possible paths from node 0 to node N-1, and return them in any order.

The graph is given as follows:  the nodes are 0, 1, ..., graph.length - 1.  graph[i] is a list of all nodes j for which the edge (i, j) exists.

Example:
Input: [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: The graph looks like this:
0--->1
|    |
v    v
2--->3
There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
 

Constraints:

The number of nodes in the graph will be in the range [2, 15].
You can print different paths in any order, but you should keep the order of nodes inside one path.
*/

class Solution {
public:
    vector<vector<int>> res;
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        int last = graph.size()-1;
        vector<int> vec;
        helper(graph, vec, last);
        return res;
    }
    
    void helper(vector<vector<int>>& graph, vector<int> temp, int item){
        for(int i=0; i<graph.size()-1; i++){
            vector<int> vec = temp;
            auto it = find(graph[i].begin(), graph[i].end(), item);
            if(it == graph[i].end()){
                continue;
            }
            else{
                if(i==0){
                    vec.push_back(0);
                    reverse(vec.begin(), vec.end());
                    vec.push_back(graph.size()-1);
                    res.push_back(vec);        
                }
                else{
                    vec.push_back(i);
                    helper(graph, vec, i);
                }
            }
        }
    }
};
